_id is a combination of The time stamp+Mac address of the machine+process id of the machine +counter running
time stampfield occupies first4 bytes
mac address occupies the first 3bytes
process id of the machine occupies next 2 bytes
counter running occupies  next 3 bytes
so a total combinatiion of 4+3+2+3 makes 12 bytes the _id

Even we can specify the _id on our own but it should be unique. But if it is not unique it throws a write error
And if you are doing batch processing by using insertMany command if the operation fails because of the duplicate id the all other writes that are expected to happen post to that will fail.

If you want to make the writes happen except for the one with duplicate id we have to specify the parameter {ordered:true} to push all the writes into the database
It supports data integrity-- which means we can't insert 2 documents into db with the same _id.

//Reading documents in MongoDB

db.collectionname.findOne()--- to return one file
db.collectionname.findOne().pretty() -- for pretty priniting the file on the mongodb console
db.collectionname.find() ---- to return all the documents

We can have a cursor initialized on db.collectionname.find({}) and we can set to a cursor this will be helpful
if cursor.hasNext() -- checks if there are any more values that need to be returned
if it is true it returns the next value by using cursor.next() 
if it is false it returns an error
Batch size will not exceed the maximum bson document size
cursor is automically iterated upto 20 times
the first batch is returned upto 101 documents or of a maximum size of 1MB
the next batches return a maximum size of 4MB
When MongoDB is fetching results from the data base it fetches the data in batches
the batch has a maximum of 101 documents or 1 MB of data
when these 101 documents are displayed to the user it again fetches the data in Batches now at a batch size of 4MB.
Even though it fetches 101 documents by batch and keep in its memory it will display maximum of 20 documents only

Projections
It returns only the fields that are requested by limiting to the items only we want
It reduces the network overhead as the large amount of data that need to be transfered on the distribution is reduced and it increases the processing capability
Projections are supplied as the second command to the find command if we want something only we have to specify that parameter as 1 
so that only the document with that field and _id is returned by default
but if we want some field not to be display we can mark projection as 0 so that except that fields rest of the fields are returned

Comparision operators
$eq,$ne,$gt,$gte,$lt,$lte,$in,$nin
db.movieDetails.find({"tomato.meter":{$gt:60,$lt:100}},{"title":1,"_id":0});

Element operators
$exists,$type-- string value--2

Logical Operators
$and,$or,$nor,$not
$nor--inverse of $or
$and is used to specify multiple specify criteria on the same field
or else we can use the normal find operation without and
$exists is used to match all those documents where certain parameter exists in those documents

Regex Operators
These are used to fetch the matching text

Array Operators
$all operator --- 
This is used to match all the elements in the array you specify irrespective of the order they are present
I was unable to understand the real importance of $all operator because there is an exact match of an array
but when you are doing the exact match of an array you have to specify the order in which the elements are present.
Using $all removes such constraint
 Say you have requirementof genres array
 you have to query in the following way 
 db.movieDetails.find("genres":["Action,"Crime","Drama"])
 here you need to specify the order in which they are present in the database
 But of you are not sure about the order then it is safe to write query in the following way4

 db.movieDetails.find({"genres":{$all:["Action","Drama","Crime"]}})

$ size operator
This operator is useful for finding the length of the field 
Say you have a key with an array and you remember that key has only two values then it is easy to search for that particular key using the $size operator

$elemMatch is used to find the values of documents in an array
it means if a key in a document has an array of documents and you want to apply condition on some of the parameters on the document in the array then $elemMatch works super cool :) 


Updating Documents

Documents can be updated by using $set operator
$set modifies the value of the key 
Say if the value of an key is an array it is modified to key-value pair
//Array Update Operators
So if you want to update the array then use the $push operator
And if you want to remote specifie element from the array then use $pull operator
If you want to add set of Elements to the array  then use $ pushAll operator
The same can be used to pull the elements from the array by using $pullAll operator
If you want to remove the last element in the array then you can use the $pop operator
$addToSet -- As all knows setonly allows unique values addToSet adds only if the values are not present
$each operator can be used to add the values to the array by checking if the operator is not present
$slice operator to slice the array after updating 
For using the $slice operator we must use the $push operator adn $each operator and specify $slice then

Example:- db.movieDetails.update({"title":"Rang De Basanti"},
									{"$push":{"actors":{$each:[],$slice:-5}}})

$sort operator to sort the array after updating
For using the $sort operator we must use the $push operator adn $each operator and specify $sort then

Example:- db.movieDetails.update({"title":"Rang De Basanti"},
									{"$push":{"actors":{$each:[],$sort:{"actors":1}}}})
$position operator is used for inserting at the starting of the array
FOr using the $position operator we have to use $push operator too
and $each and position index finally
 so the query looks as the follwing
 db.movieDetails.update({"title":"Rang De Basanti"},{"$push":{actors:{$each:[],$position:0}}})


//Field Update Operators($inc,$mul,$set,$unset,$min,$rename,$max)
If you want to increment the value of something then you to use the $inc operator and if you want to multiply then you ahve to use $mul operator
db.movieDetails.update({"title":"Rang De Basanti"},{$inc:{"imdb.rating":1.1}}) // This command increments the rating by 1.1
db.movieDetails.update({"title":"Rang De Basanti"},{$mul:{"awards.wins":6}}) // This command multiplies the awards by 6
db.movieDetails.rename({"title":"Rang De Basanti"},{$rename:{"director":"chiefguy"}}) // This command is sued to rename the key portion if some thing is wrong 
db.movieDetails.update({"title":"Rang De Basanti"},{$unset:{"chiefguy":"Rakeysh Omprakash Mehra"}}) // This command deletes the entry of director for that movie
This is used for deleting the individual parts of the document
db.movieDetails.update({"title":"Rang De Basanti"},{$set:{"chiefguy":"Rakeysh Omprakash Mehra"}})//This command adds the entry of director for that movie
db.movieDetails.update({"title":"Rang De Basanti"},{$min:{"imdb.rating":7.7}})//This command updates the rating for that movie if the given rating is less than the existing rating otherwise no affect takes place
This command is helpful if we don't know what is the value of rating present in the db and you want to update only if the value you supplied is less
db.movieDetails.update({"title":"Rang De Basanti"},{$max:{"imdb.rating":9}})//This command updates the rating for that movie if the given rating is more than the existing rating otherwise no affect takes place
This command is helpful if we don't know what is the value of rating present in the db and you want to update only if the value you supplied is more
Upsert:true -- option at the end results in the insertion of the document if that document is not present in db
$setOnInsert --- inserting two docs parallely into an empty collection may require $setOnInsert
$currentDate --  this is used for including the timestamp and the ISO date at which the document is modified
db.movieDetails.find({"title":"Rang De Basanti"},{$currentDate:{"lastModified":true,"timestamp":{$type:"timestamp"}}});// THis adds the current timestamp and the ISO date same as set method
